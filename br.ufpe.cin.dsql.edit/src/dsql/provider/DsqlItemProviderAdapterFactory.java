/**
 */
package dsql.provider;

import dsql.util.DsqlAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DsqlItemProviderAdapterFactory extends DsqlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DsqlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.QueryDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryDiagramItemProvider queryDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.QueryDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryDiagramAdapter() {
		if (queryDiagramItemProvider == null) {
			queryDiagramItemProvider = new QueryDiagramItemProvider(this);
		}

		return queryDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.Query} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryItemProvider queryItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.Query}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryAdapter() {
		if (queryItemProvider == null) {
			queryItemProvider = new QueryItemProvider(this);
		}

		return queryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.Source} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceItemProvider sourceItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.Source}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceAdapter() {
		if (sourceItemProvider == null) {
			sourceItemProvider = new SourceItemProvider(this);
		}

		return sourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.Unary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryItemProvider unaryItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.Unary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryAdapter() {
		if (unaryItemProvider == null) {
			unaryItemProvider = new UnaryItemProvider(this);
		}

		return unaryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.Binary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryItemProvider binaryItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.Binary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryAdapter() {
		if (binaryItemProvider == null) {
			binaryItemProvider = new BinaryItemProvider(this);
		}

		return binaryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.Ternary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TernaryItemProvider ternaryItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.Ternary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTernaryAdapter() {
		if (ternaryItemProvider == null) {
			ternaryItemProvider = new TernaryItemProvider(this);
		}

		return ternaryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.LogicalOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalOperationItemProvider logicalOperationItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.LogicalOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalOperationAdapter() {
		if (logicalOperationItemProvider == null) {
			logicalOperationItemProvider = new LogicalOperationItemProvider(this);
		}

		return logicalOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.When} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhenItemProvider whenItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.When}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhenAdapter() {
		if (whenItemProvider == null) {
			whenItemProvider = new WhenItemProvider(this);
		}

		return whenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.Else} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElseItemProvider elseItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.Else}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElseAdapter() {
		if (elseItemProvider == null) {
			elseItemProvider = new ElseItemProvider(this);
		}

		return elseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.SetLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetLinkItemProvider setLinkItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.SetLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetLinkAdapter() {
		if (setLinkItemProvider == null) {
			setLinkItemProvider = new SetLinkItemProvider(this);
		}

		return setLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.JoinLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinLinkItemProvider joinLinkItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.JoinLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinLinkAdapter() {
		if (joinLinkItemProvider == null) {
			joinLinkItemProvider = new JoinLinkItemProvider(this);
		}

		return joinLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.JoinConditionLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinConditionLinkItemProvider joinConditionLinkItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.JoinConditionLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinConditionLinkAdapter() {
		if (joinConditionLinkItemProvider == null) {
			joinConditionLinkItemProvider = new JoinConditionLinkItemProvider(this);
		}

		return joinConditionLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.SubqueryLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubqueryLinkItemProvider subqueryLinkItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.SubqueryLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubqueryLinkAdapter() {
		if (subqueryLinkItemProvider == null) {
			subqueryLinkItemProvider = new SubqueryLinkItemProvider(this);
		}

		return subqueryLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.LogicalLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalLinkItemProvider logicalLinkItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.LogicalLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalLinkAdapter() {
		if (logicalLinkItemProvider == null) {
			logicalLinkItemProvider = new LogicalLinkItemProvider(this);
		}

		return logicalLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dsql.ConditionalExpressionLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalExpressionLinkItemProvider conditionalExpressionLinkItemProvider;

	/**
	 * This creates an adapter for a {@link dsql.ConditionalExpressionLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalExpressionLinkAdapter() {
		if (conditionalExpressionLinkItemProvider == null) {
			conditionalExpressionLinkItemProvider = new ConditionalExpressionLinkItemProvider(this);
		}

		return conditionalExpressionLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (queryDiagramItemProvider != null) queryDiagramItemProvider.dispose();
		if (queryItemProvider != null) queryItemProvider.dispose();
		if (sourceItemProvider != null) sourceItemProvider.dispose();
		if (unaryItemProvider != null) unaryItemProvider.dispose();
		if (binaryItemProvider != null) binaryItemProvider.dispose();
		if (ternaryItemProvider != null) ternaryItemProvider.dispose();
		if (logicalOperationItemProvider != null) logicalOperationItemProvider.dispose();
		if (whenItemProvider != null) whenItemProvider.dispose();
		if (elseItemProvider != null) elseItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (setLinkItemProvider != null) setLinkItemProvider.dispose();
		if (joinLinkItemProvider != null) joinLinkItemProvider.dispose();
		if (joinConditionLinkItemProvider != null) joinConditionLinkItemProvider.dispose();
		if (subqueryLinkItemProvider != null) subqueryLinkItemProvider.dispose();
		if (logicalLinkItemProvider != null) logicalLinkItemProvider.dispose();
		if (conditionalExpressionLinkItemProvider != null) conditionalExpressionLinkItemProvider.dispose();
	}

}
